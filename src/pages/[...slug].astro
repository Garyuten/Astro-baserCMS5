---
import Layout from "@layouts/Layout.astro";
import fetch from "node-fetch";
import { myContents } from "@lib/api";
import { myUtils } from '@lib/utils';

const { url, id, title, type, plugin, name } = Astro.props;

/**
 * Retrieves the static paths for the pages.
 * @returns {object[]} An array of objects representing the static paths.
 */

interface MyPage {
  url: string;
  id: number;
  entity_id?: string;
  title: string;
  type: string;
  plugin: string;
  name: string;
}

export async function getStaticPaths() {
  // const myPages: MyPage[] = await getMyPages();
  console.log("myContents ------------------");
  console.log("myContents.length:", myContents.length);
  const paths = myContents
    .map(({ url, id, title, type, plugin, name }) => {
      if (url === "/") {
        // Skip the loop
        return null;
      }
      return {
        params: { slug: url.substring(1) }, // Remove leading '/' for slug
        props: { url, id, title, type, plugin, name },
      };
    })
    .filter(Boolean); // Exclude null values
  // console.log("paths ------------------");
  // console.log(paths);
  return paths;
}

// URLからpageIdパラメータを取得
let { slug } = Astro.params;
// console.log("Astro.params ------------------");
// console.log(Astro.params);
console.log("slug:" + slug);
// dev時：slugの先頭に / がない場合は付ける  (例：about → /about)
if (slug.charAt(0) !== "/") {
  slug = "/" + slug;
}

// コンテンツ一覧を取得
// myContents の中から url が一致するオブジェクトを取得する
let pageObj = myContents.find((page: any) => {
  const isMatch = page.url == slug || page.url == slug + "/";
  // console.log("Checking page:", page.url, "Match:", isMatch);
  return isMatch;
});

console.log("pageObj ------------------");
// console.log(pageObj);

let pageId: string = "";
let contentId: number = 0;

let page: any = {};
let prevPage: any = {};
let nextPage: any = {};

if (pageObj === undefined) {
  console.log("pageObj is undefined");
  // myContents の中から url が一致するページがない場合は、404ページを表示
  pageObj = myContents.find((page: any) => page.url === "/404");

  page = {
    content: {
      title: "404 Not Found",
      eyecatch: null,
    },
    contents: "<p>ページが見つかりませんでした。</p>",
  };
}

// 固定ページの場合
else if (pageObj.type === "Page") {
  console.log("pageObj.type === Page", pageObj.type);
  // myPages の中から url が一致するページのidを取得
  if (pageObj.entity_id === undefined) {
    page = {
      content: {
        title: "underfined",
        eyecatch: null,
      },
      contents: "pageObj.entity_id が正しく取得できませんでした",
    };
  } else {
    pageId = pageObj.entity_id;
    contentId = parseInt(pageObj.id);
    console.log("pageId= " + pageId);
    console.log("contentId= " + contentId);
    // baserCMS5のAPIからページ情報を取得
    const res = await fetch(
      `${import.meta.env.VITE_API_BASE_URL}/baser-core/pages/${pageId}.json`,
    );
    const data: Record<string, any> = (await res.json()) as Record<string, any>;
    page = data.page;

    // コンテンツの次、前のページを取得
    const prev = await fetch(
      `${import.meta.env.VITE_API_BASE_URL}/baser-core/contents/get_prev/${contentId}.json`,
    );
    const prevData: Record<string, any> = (await prev.json()) as Record<
      string,
      any
    >;
    prevPage = prevData.content;

    const next = await fetch(
      `${import.meta.env.VITE_API_BASE_URL}/baser-core/contents/get_next/${contentId}.json`,
    );

    // `nextData`の再宣言を避ける
    const nextData: Record<string, any> = (await next.json()) as Record<
      string,
      any
    >;
    nextPage = nextData.content;
  }
} else if (pageObj.type === "ContentFolder") {
  /* ToDo 
"type": "ContentFolder", の場合の処理
例）/service/ サービスのTOPページ
*/
  // コンテンツフォルダの場合
  // 仮にコンテンツを定義
  page = {
    content: {
      title: pageObj.title,
      eyecatch: null,
    },
    contents: "<p>コンテンツフォルダのコンテンツ（準備中）</p>",
  };
} else if (pageObj.type === "MailContent") {
  /*
"type": "MailContent",の場合の処理
例）お問い合わせページ
*/
  // メールフォームの場合
  // 仮コンテンツを定義
  page = {
    content: {
      title: pageObj.title,
      eyecatch: null,
    },
    contents: "<p>MailContentのコンテンツ（準備中）</p>",
  };
} else {
  page = {
    content: {
      title: "underfined",
      eyecatch: null,
    },
    contents: "<p>（準備中）</p>",
  };
}

// console.log("page ------------------");
// console.log(page);
---

{
  page.content && (
    <Layout title={page.content.title} contentId={contentId}>
      <article>
        <h1 set:html={page.content.title} />
        {page.content.eyecatch && (
          <img src={`${page.content.eyecatch}`} alt="" />
        )}
        {page.contents && <Fragment set:html={page.contents} />}
      </article>

      <div>
        {prevPage && <a href={prevPage.url}>{prevPage.title}</a>}
        {nextPage && <a href={nextPage.url}>{nextPage.title}</a>}
      </div>
    </Layout>
  )
}
