---
import Layout from "../layouts/Layout.astro";
import fetch from "node-fetch";
import { myPages } from "../js/shared.js";

const { url, id, title, type, plugin, name } = Astro.props;

/**
 * Retrieves the static paths for the pages.
 * @returns {object[]} An array of objects representing the static paths.
 */
export async function getStaticPaths() {
  const paths: object = myPages
    .map(
      ({
        url,
        id,
        title,
        type,
        plugin,
        name,
      }: {
        url: string;
        id: string;
        title: string;
        type: string;
        plugin: string;
        name: string;
      }) => {
        if (url === "/") {
          // Skip the loop
          return;
        }
        return {
          params: { slug: url },
          props: { id, title, type, plugin, name },
        };
      },
    )
    .filter(Boolean); // Exclude undefined values
  // console.log("paths ------------------");
  // console.log(paths);
  return paths;
}

// URLからpageIdパラメータを取得
let { slug } = Astro.params;
// console.log("Astro.params ------------------");
// console.log(Astro.params);
// console.log('slug:' + slug);
// dev時：slugの先頭に / がない場合は付ける  (例：about → /about)
if (slug.charAt(0) !== "/") {
  slug = "/" + slug;
}

// myPages の中から url が一致するオブジェクトを取得する
let pageObj = myPages.find((page: any) => {
  const isMatch = page.url == slug || page.url == slug + "/";
  // console.log("Checking page:", page.url, "Match:", isMatch);
  return isMatch;
});

// console.log("pageObj ------------------");
// console.log(pageObj);

let pageId: string = "";
let contentId: string = "";

if (pageObj !== undefined) {
  // myPages の中から url が一致するページのidを取得
  pageId = pageObj.entity_id;
  contentId = pageObj.id;
  console.log("pageId= " + pageId);
  console.log("contentId= " + contentId);
} else {
  console.log("pageObj is undefined");
  // myPages の中から url が一致するページがない場合は、404ページを表示
  pageObj = myPages.find((page: any) => page.url === "/404");

  page = {
    content: {
      title: "404 Not Found",
      eyecatch: null,
    },
    contents: "<p>ページが見つかりませんでした。</p>",
  };
}

let page: any = {};
let prevPage: any = {};
let nextPage: any = {};

// 固定ページの場合
if (pageObj.type === "Page") {
  // baserCMS5のAPIからページ情報を取得
  const res = await fetch(
    `${import.meta.env.API_BASE_URL}/baser-core/pages/${pageId}.json`,
  );
  const data: Record<string, any> = (await res.json()) as Record<string, any>;
  page = data.page;

  // コンテンツの次、前のページを取得
  const prev = await fetch(
    `${
      import.meta.env.API_BASE_URL
    }/baser-core/contents/get_prev/${contentId}.json`,
  );
  const prevData: Record<string, any> = (await prev.json()) as Record<
    string,
    any
  >;
  prevPage = prevData.content;
  // console.log(prevData);

  const next = await fetch(
    `${
      import.meta.env.API_BASE_URL
    }/baser-core/contents/get_next/${contentId}.json`,
  );

  // `nextData`の再宣言を避ける
  const nextData: Record<string, any> = (await next.json()) as Record<
    string,
    any
  >;
  nextPage = nextData.content;
  // console.log(nextData);
} else if (pageObj.type === "ContentFolder") {

/* ToDo 
"type": "ContentFolder", の場合の処理
例）/service/ サービスのTOPページ
*/
  // コンテンツフォルダの場合
  // 仮にコンテンツを定義
  page = {
    content: {
      title: pageObj.title,
      eyecatch: null,
    },
    contents: "<p>コンテンツフォルダのコンテンツ（準備中）</p>",
  };
} else if (pageObj.type === "MailContent") {

/*
"type": "MailContent",の場合の処理
例）お問い合わせページ
*/
  // メールフォームの場合
  // 仮コンテンツを定義
  page = {
    content: {
      title: pageObj.title,
      eyecatch: null,
    },
    contents: "<p>MailContentのコンテンツ（準備中）</p>",
  };
} else {
  page = {
    content: {
      title: pageObj.title,
      eyecatch: null,
    },
    contents: "<p>（準備中）</p>",
  };
}

// console.log("page ------------------");
// console.log(page);
---

{
  page.content && (
    <Layout title={page.content.title}>
      <article>
        <h1 set:html={page.content.title} />
        {page.content.eyecatch && (
          <img src={`${page.content.eyecatch}`} alt="" />
        )}
        {page.contents && <Fragment set:html={page.contents} />}
      </article>

      <div>
        {prevPage && <a href={prevPage.url}>{prevPage.title}</a>}
        {nextPage && <a href={nextPage.url}>{nextPage.title}</a>}
      </div>
    </Layout>
  )
}
