---
import Layout from '../../layouts/Layout.astro';
import PostItem from '../../components/PostItem.astro';
import fetch from 'node-fetch';

// 固定ページ一覧取得
// const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/baser-core/contents.json`);
// const json = await res.json();
// // console.log(json);
// const contents = json.contents;

// ブログ NEWS 取得
const resNews = await fetch(`${import.meta.env.VITE_API_BASE_URL}/bc-blog/blog_posts.json?blog_content_id=1`);
const jsonNews:any = await resNews.json();
// console.log(jsonNews);
const blogPostsNews = jsonNews.blogPosts;


// ブログ NEWSカテゴリー 取得
const resCategory = await fetch(
  `${import.meta.env.VITE_API_BASE_URL}/bc-blog/blog_categories.json?blog_content_id=1`
);
const jsonCategory: Record<string, any> = await resCategory.json() as Record<string, any>;
// console.log(jsonCategory);
// idをキーとしたオブジェクトに変換
let blogCategories: { [key: string]: any } = [];
jsonCategory.blogCategories.forEach((item: any) => {
  blogCategories[item.id] = { ...item, children: [] };
});



const blogPath = '/news';
---

<Layout title="NEWS記事一覧">
	<h2>新着記事一覧</h2>
	<ul>
	{
	blogPostsNews && blogPostsNews.map((post:any) => (
		<PostItem blogPath={blogPath} blogCategories={blogCategories} post={post} />
	))
	}
	</ul>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: #333;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
